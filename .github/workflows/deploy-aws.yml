name: Deploy Web Application To AWS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Pick up the env"
        type: environment
        required: true
      destroy:
        description: Tick To Destroy The Infrastructure In The Environment
        type: boolean
        required: false


jobs:
  deploy-application-aws-dev:
    if: ${{ inputs.environment == 'dev' }}
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-2
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
    steps:
    - name: Checkout To the Repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd #v3.1.2

    - name: Cache Terraform plugins and modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 #v4.2.3
      with:
        path: |
          .terraform/providers
          .terraform/modules
        key: terraform-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
        restore-keys: terraform-${{ runner.os }}-

    # Provides AWS credentials to Terraform
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df #v4.2.1
      with:
        aws-region: $AWS_REGION
        aws-access-key-id: $AWS_ACCESS_KEY_ID
        aws-secret-access-key: $AWS_SECRET_ACCESS_KEY
    
    - name: Terraform fmt
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init -upgrade -input=false

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -auto-approve

    - name: Terraform Output
      run: terraform output

    - name: Terraform Destroy
      if: ${{ inputs.destroy }}
      run: terraform destroy -auto-approve 

  deploy-application-aws-prod:
    if: ${{ inputs.environment == 'prod' }}
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-2
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
    steps:
    - name: Checkout To the Repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd #v3.1.2

    - name: Cache Terraform plugins and modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 #v4.2.3
      with:
        path: |
          .terraform/providers
          .terraform/modules
        key: terraform-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
        restore-keys: terraform-${{ runner.os }}-

    # Provides AWS credentials to Terraform
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df #v4.2.1
      with:
        aws-region: $AWS_REGION
        aws-access-key-id: $AWS_ACCESS_KEY_ID
        aws-secret-access-key: $AWS_SECRET_ACCESS_KEY

    - name: Terraform fmt
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init -upgrade -input=false

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -auto-approve 

    - name: Terraform Output
      run: terraform output

    - name: Terraform Destroy
      if: ${{ inputs.destroy }}
      run: terraform destroy -auto-approve 
